// <auto-generated />
using System;
using CrudPerson.DataLibrary.Internal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrudPerson.DataLibrary.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20201006110922_MinimalData")]
    partial class MinimalData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrudPerson.DataLibrary.DataModel.Address", b =>
                {
                    b.Property<Guid>("Identifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifier");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Identifier = new Guid("87befc3e-dca1-4efd-b7d5-b91939beec4c"),
                            AdditionalAddress = "second floor",
                            City = "Workshop",
                            Country = "Royaume-Uni",
                            Street = "Priorswell Rd",
                            ZipCode = "S80 2BW"
                        },
                        new
                        {
                            Identifier = new Guid("414b34a4-d5d3-4128-98ed-23c64ae900c5"),
                            City = "Downey",
                            Country = "États-Unis",
                            Street = "9612 Ardine St",
                            ZipCode = "CA 90241"
                        },
                        new
                        {
                            Identifier = new Guid("22c2d1a1-ac0d-4fe2-a2fc-f4c16381bee4"),
                            City = "Göteborg",
                            Country = "Suède",
                            Street = "Kyrkogatan 28",
                            ZipCode = "411 15"
                        },
                        new
                        {
                            Identifier = new Guid("98147104-b970-46b4-86c0-af5c8853c119"),
                            City = "Kitee",
                            Country = "Finlande",
                            Street = "Mäsäsläntie 2",
                            ZipCode = "82430"
                        });
                });

            modelBuilder.Entity("CrudPerson.DataLibrary.DataModel.Person", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifier");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Identifier = new Guid("87befc3e-dca1-4efd-b7d5-b91939beec4c"),
                            Birthdate = new DateTime(1958, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bdickinson@ironmaiden.com",
                            Firstname = "Bruce",
                            Lastname = "Dickinson"
                        },
                        new
                        {
                            Identifier = new Guid("414b34a4-d5d3-4128-98ed-23c64ae900c5"),
                            Birthdate = new DateTime(1963, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.hetfield@metallica.us",
                            Firstname = "James",
                            Lastname = "Hetfield"
                        },
                        new
                        {
                            Identifier = new Guid("22c2d1a1-ac0d-4fe2-a2fc-f4c16381bee4"),
                            Birthdate = new DateTime(1986, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johanneseckerstrom@avatarband.se",
                            Firstname = "Johannes",
                            Lastname = "Eckerström"
                        },
                        new
                        {
                            Identifier = new Guid("98147104-b970-46b4-86c0-af5c8853c119"),
                            Birthdate = new DateTime(1977, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tar.turunen@nightwish.fi",
                            Firstname = "Tarja",
                            Lastname = "Turunen"
                        });
                });

            modelBuilder.Entity("CrudPerson.DataLibrary.DataModel.Address", b =>
                {
                    b.HasOne("CrudPerson.DataLibrary.DataModel.Person", null)
                        .WithOne("Address")
                        .HasForeignKey("CrudPerson.DataLibrary.DataModel.Address", "Identifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
